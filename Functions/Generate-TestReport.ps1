Function Generate-TestReport {
    $modPath = Get-Module Shellformance
    $PathResult = Join-Path $modPath.ModuleBase  "Results"
    $ReportsOnlyFiles = Get-ChildItem $PathResult '*-Results-*'
    $OutFPPath = Join-Path $modPath.ModuleBase  "HTML"
    $OutPath = Join-Path $OutFPPath "index.html"
    $ThisFrag = ""
    $Null = Try{invoke-command { [System.Web.HttpUtility]} -ea stop }Catch{Add-type System.Web}
    if (! (test-path $OutFPPath) ){
        $null = New-Item -Type Directory $OutFPPath
    }
    $docs = Join-Path $modPath.ModuleBase  "Docs"
    if (! (test-path $Docs) ){
        $null = New-Item -Type Directory $Docs
    }
    $template = @{PreContent = "<P>Generated by ShellFormance</P>" ; PostContent = "<P>Work in progress.</P>"}
    $ThisFrag += "<P>Generated by ShellFormance</P>"

    $MDSummary = [System.Collections.ArrayList]@( @("# Summary of all tests") )
    foreach($file in $ReportsOnlyFiles){
        $CSVSummary = Import-csv $file
        $FileName = (Split-Path -Leaf $file) -replace '\.csv'
        $wholefile = Join-Path (split-path $file -parent) ( ( split-path -leaf $file ) -replace '-Results' )
        $CSVWhole = Import-CSV $wholefile
        $HTMLName = "$FileName.html"
        $ThisFP = Join-Path $OutFPPath $HTMLName

        $ThisFrag += ( ( $csvSummary | ConvertTo-HTML -As Table -Fragment -PreContent "<br/><H2><a href='$(join-path "." $HTMLName)'>Full report $FileName</a></H2>" ) )
        $ps1 = split-path -leaf ($file.FullName -replace '-Results.*$','.ps1')
        $MoreInfo = "<P>For more information about the functions - <a href='..\PerformanceTests\$ps1'>$ps1</a></P>"
        $CSVWhole | ConvertTo-HTML -Title "Results of $(split-path -leaf $wholefile)" -as Table -cssUri "./basic.css" -PreContent "<P>Generated by ShellFormance</P><br/><H2>Full report $FileName (Sorted on Time/Avg.time)</H2>" -postContent ($MoreInfo + $template.PostContent ) | out-file -force $ThisFP

        $MDFilePath = (Join-Path $Docs "$FileName.md")
        $MDResolve = ( Resolve-Path -Relative $MDFilePath ) -replace '\\','/' -replace '^\.'
        $null = $MDSummary.Add( "## [$FileName]($MDResolve)" )
        $MDSummary.AddRange( ( ConvertTo-MarkDownTable $CSVSummary ) )
        $null = $MDSummary.Add( "" )
        @("# $FileName","## Index","- Summary","- Full report","## Summary",@( ( ConvertTo-MarkDownTable $CSVSummary ) ), "## Full report",@( ( ConvertTo-MarkDownTable $CSVWhole ) )) | Out-File -FilePath $MDFilePath
    }
    Out-File -InputObject $MDSummary -FilePath (Join-Path $Docs "index.md")
    $html = ConvertTo-html -Title "Test summary" -Body $ThisFrag -postContent $template.PostContent  -cssUri "./basic.css" #| Out-File -force $OutPath
    [System.Web.HttpUtility]::HtmlDecode($html) | Out-File $OutPath
}

Function ConvertTo-MarkDownTable {
    Param(
        [Parameter(ValueFromPipeline)]
        $Objects
    )
    Begin{$StuffToProcess = [System.Collections.ArrayList]@()}
    Process{
        $null = $StuffToProcess.AddRange( @($Objects) )
    }
    End{
        Foreach($item in $StuffToProcess){
            $item.name = $item.name -replace '\|','l'
        }
        $Convert = [System.Collections.ArrayList]@($StuffToProcess |ConvertTo-CSV -Delimiter "|" -NoTypeInformation)
        $ExtraRow = "---|" * ($Convert[0].split('|').count -1 ) + '---'
        $Convert.Insert(1,$ExtraRow)
        $Convert -replace '^|$','|'
    }
}

Export-ModuleMember -function Generate-TestReport